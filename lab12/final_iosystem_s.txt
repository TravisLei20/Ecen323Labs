 Address    Code        Basic                     Source

0x00000000  0x00004137  lui x2,0x00000004     81       li sp, 0x3ffc
0x00000004  0xffc10113  addi x2,x2,0xfffffffc      
0x00000008  0x000021b7  lui x3,0x00000002     85   	lui gp, 2
0x0000000c  0x00008237  lui x4,0x00000008     87       li tp, 0x7f00
0x00000010  0xf0020213  addi x4,x4,0xffffff00      
0x00000014  0x00008437  lui x8,0x00000008     89       li s0, 0x8000
0x00000018  0x00040413  addi x8,x8,0x00000000      
0x0000001c  0x1dc000ef  jal x1,0x000000ee     93       jal ra, SET_COLOR_FROM_STARTING_LOC
0x00000020  0x00022c23  sw x0,0x00000018(x4)  98       sw x0, 0x18(tp)
0x00000024  0x02022823  sw x0,0x00000030(x4)  99       sw x0, 0x30(tp)
0x00000028  0x0041a283  lw x5,0x00000004(x3)  102      lw t0, %lo(ENDING_CHARACTER)(gp)                   # Load character value to write
0x0000002c  0x00c1a303  lw x6,0x0000000c(x3)  103      lw t1, %lo(ENDING_CHARACTER_LOC)(gp)               # Load address of character location
0x00000030  0x00532023  sw x5,0x00000000(x6)  104      sw t0, 0(t1)
0x00000034  0x00008537  lui x10,0x00000008    107      li a0, 0x8204
0x00000038  0x20450513  addi x10,x10,0x0000020     
0x0000003c  0x00100593  addi x11,x0,0x00000001108      li a1, 0x1
0x00000040  0x15c000ef  jal x1,0x000000ae     109      jal MOVE_CHARACTER
0x00000044  0x038000ef  jal x1,0x0000001c     114      jal ra, PROCESS_BUTTONS
0x00000048  0xfea00ee3  beq x0,x10,0xfffffffe 117      beq x0, a0, PROC_BUTTONS
0x0000004c  0x12c000ef  jal x1,0x00000096     120      jal REACH_END
0x00000050  0xfd1ff06f  jal x0,0xffffffe8     121      j RESTART
0x00000054  0x03022283  lw x5,0x00000030(x4)  129      lw t0, 0x30(tp)
0x00000058  0x06400313  addi x6,x0,0x00000064 130      li t1, 100
0x0000005c  0x00531e63  bne x6,x5,0x0000000e  131      bne t1, t0, UT_DONE
0x00000060  0x02022823  sw x0,0x00000030(x4)  133      sw x0, 0x30(tp)
0x00000064  0x01822283  lw x5,0x00000018(x4)  134      lw t0, 0x18(tp)
0x00000068  0x00128293  addi x5,x5,0x00000001 135      addi t0, t0, 1
0x0000006c  0x00522c23  sw x5,0x00000018(x4)  136      sw t0, 0x18(tp)
0x00000070  0x00422f83  lw x31,0x00000004(x4) 139      lw t6, 0x4(tp)
0x00000074  0x01f22023  sw x31,0x00000000(x4) 140      sw t6, 0x0(tp)
0x00000078  0x00008067  jalr x0,x1,0x00000000 143      jalr x0, ra, 0
0x0000007c  0xffc10113  addi x2,x2,0xfffffffc 151  	addi sp, sp, -4	    # Make room to save values on the stack
0x00000080  0x00112023  sw x1,0x00000000(x2)  152  	sw ra, 0(sp)		# Copy return address to stack
0x00000084  0xfd1ff0ef  jal x1,0xffffffe8     158      jal UPDATE_TIMER
0x00000088  0x02422283  lw x5,0x00000024(x4)  159      lw t0, 0x24(tp)
0x0000008c  0xfe501ce3  bne x0,x5,0xfffffffc  161      bne x0, t0, PB_1
0x00000090  0xfc5ff0ef  jal x1,0xffffffe2     167      jal UPDATE_TIMER
0x00000094  0x02422283  lw x5,0x00000024(x4)  168      lw t0, 0x24(tp)
0x00000098  0xfe500ce3  beq x0,x5,0xfffffffc  170      beq x0, t0, PB_2
0x0000009c  0x0081a483  lw x9,0x00000008(x3)  175      lw s1, %lo(MOVING_CHARACTER_LOC)(gp)               # Load address current character
0x000000a0  0x00800313  addi x6,x0,0x00000008 178      addi t1, x0, 0x08
0x000000a4  0x02629463  bne x5,x6,0x00000014  179      bne t0, t1, PB_CHECK_BTNL
0x000000a8  0x04c00393  addi x7,x0,0x0000004c 181      li t2, 76
0x000000ac  0x1fc00293  addi x5,x0,0x000001fc 182      li t0, 0x1fc
0x000000b0  0x0092f333  and x6,x5,x9          183      and t1, t0, s1                # Mask bits in address of column 
0x000000b4  0x00235313  srli x6,x6,0x00000002 184      srli t1, t1, 2     # Shift down to get column number
0x000000b8  0x0a730063  beq x6,x7,0x00000050  185      beq t1, t2, PB_DONE_BTN_CHECK # Last column, skip
0x000000bc  0x00448513  addi x10,x9,0x00000004186      addi a0, s1, 4                # Increment pointer
0x000000c0  0x00300593  addi x11,x0,0x00000003187      li a1, 0x3
0x000000c4  0x0d8000ef  jal x1,0x0000006c     188      jal MOVE_CHARACTER
0x000000c8  0x0900006f  jal x0,0x00000048     189      j PB_DONE_BTN_CHECK
0x000000cc  0x00200313  addi x6,x0,0x00000002 192      addi t1, x0, 0x02
0x000000d0  0x02629263  bne x5,x6,0x00000012  193      bne t0, t1, PB_CHECK_BTND
0x000000d4  0x1fc00293  addi x5,x0,0x000001fc 195      li t0, 0x1fc
0x000000d8  0x0092f333  and x6,x5,x9          196      and t1, t0, s1               # Mask bits in address of column 
0x000000dc  0x00235313  srli x6,x6,0x00000002 197      srli t1, t1, 2    # Shift down to get column number
0x000000e0  0x06600c63  beq x0,x6,0x0000003c  198      beq x0, t1, PB_DONE_BTN_CHECK # Too far left, skip
0x000000e4  0xffc48513  addi x10,x9,0xfffffffc199      addi a0, s1, -4              # Decrement pointer
0x000000e8  0x00300593  addi x11,x0,0x00000003200      li a1, 0x3
0x000000ec  0x0b0000ef  jal x1,0x00000058     201      jal MOVE_CHARACTER
0x000000f0  0x0680006f  jal x0,0x00000034     202      j PB_DONE_BTN_CHECK
0x000000f4  0x00400313  addi x6,x0,0x00000004 205      addi t1, x0, 0x04
0x000000f8  0x02629663  bne x5,x6,0x00000016  206      bne t0, t1, PB_CHECK_BTNU
0x000000fc  0x01d00393  addi x7,x0,0x0000001d 208      li t2, 29
0x00000100  0x000042b7  lui x5,0x00000004     209      li t0, 0x3e00
0x00000104  0xe0028293  addi x5,x5,0xfffffe00      
0x00000108  0x0092f333  and x6,x5,x9          210      and t1, t0, s1                 # Mask bits in address of row 
0x0000010c  0x00935313  srli x6,x6,0x00000009 211      srli t1, t1, 9         # Shift down to get column number
0x00000110  0x04735463  bge x6,x7,0x00000024  212      bge t1, t2, PB_DONE_BTN_CHECK   # Too far up, skip
0x00000114  0x20048513  addi x10,x9,0x00000200213      addi a0, s1, 512               # Increment pointer
0x00000118  0x00300593  addi x11,x0,0x00000003214      li a1, 0x3
0x0000011c  0x080000ef  jal x1,0x00000040     215      jal MOVE_CHARACTER
0x00000120  0x0380006f  jal x0,0x0000001c     216      j PB_DONE_BTN_CHECK
0x00000124  0x01000313  addi x6,x0,0x00000010 219      addi t1, x0, 0x10
0x00000128  0x02629463  bne x5,x6,0x00000014  220      bne t0, t1, PB_CHECK_BTNC
0x0000012c  0x000042b7  lui x5,0x00000004     222      li t0, 0x3e00
0x00000130  0xe0028293  addi x5,x5,0xfffffe00      
0x00000134  0x0092f333  and x6,x5,x9          223      and t1, t0, s1                 # Mask bits in address of row 
0x00000138  0x00935313  srli x6,x6,0x00000009 224      srli t1, t1, 9         # Shift down to get column number
0x0000013c  0x00030e63  beq x6,x0,0x0000000e  225      beq t1, x0, PB_DONE_BTN_CHECK   # Too far up, skip
0x00000140  0xe0048513  addi x10,x9,0xfffffe00226      addi a0, s1, -512               # Increment pointer
0x00000144  0x00300593  addi x11,x0,0x00000003227      li a1, 0x3
0x00000148  0x054000ef  jal x1,0x0000002a     228      jal MOVE_CHARACTER
0x0000014c  0x00c0006f  jal x0,0x00000006     229      j PB_DONE_BTN_CHECK
0x00000150  0x00100313  addi x6,x0,0x00000001 233      addi t1, x0, 0x01
0x00000154  0x00629263  bne x5,x6,0x00000002  235      bne t0, t1, PB_DONE_BTN_CHECK
0x00000158  0x00c1a303  lw x6,0x0000000c(x3)  241      lw t1, %lo(ENDING_CHARACTER_LOC)(gp)               # Load address of end location
0x0000015c  0x00a31663  bne x6,x10,0x00000006 242      bne t1, a0, PB_EXIT_NOT_AT_END
0x00000160  0x00100513  addi x10,x0,0x00000001244      addi a0, x0, 1
0x00000164  0x00000463  beq x0,x0,0x00000004  245      beq x0, x0, PB_EXIT
0x00000168  0x00000533  add x10,x0,x0         249      mv a0, x0
0x0000016c  0x00012083  lw x1,0x00000000(x2)  253  	lw ra, 0(sp)		# Restore return address
0x00000170  0x00410113  addi x2,x2,0x00000004 254  	addi sp, sp, 4		# Update stack pointer
0x00000174  0x00008067  jalr x0,x1,0x00000000 256      jalr x0, ra, 0
0x00000178  0x0f0f12b7  lui x5,0x0000f0f1     264      li t0, 0x0f0f0fDA
0x0000017c  0xfda28293  addi x5,x5,0xffffffda      
0x00000180  0x00c1a303  lw x6,0x0000000c(x3)  265      lw t1, %lo(ENDING_CHARACTER_LOC)(gp)               # Load address of end location
0x00000184  0x00532023  sw x5,0x00000000(x6)  266      sw t0, 0(t1)
0x00000188  0x02422283  lw x5,0x00000024(x4)  270      lw t0, 0x24(tp)
0x0000018c  0xfe501ee3  bne x0,x5,0xfffffffe  272      bne x0, t0, RE_1
0x00000190  0x02422283  lw x5,0x00000024(x4)  276      lw t0, 0x24(tp)
0x00000194  0xfe500ee3  beq x0,x5,0xfffffffe  278      beq x0, t0, RE_2
0x00000198  0x00008067  jalr x0,x1,0x00000000 280      jalr x0, ra, 0
0x0000019c  0x00052303  lw x6,0x00000000(x10) 292      lw t1, 0(a0)
0x000001a0  0x0041a383  lw x7,0x00000004(x3)  294      lw t2, %lo(DISPLACED_CHARACTER)(gp)
0x000001a4  0x0081ae03  lw x28,0x00000008(x3) 296      lw t3,%lo(MOVING_CHARACTER_LOC)(gp)
0x000001a8  0x0015f293  andi x5,x11,0x00000001299      andi t0, a1, 0x1
0x000001ac  0x00028e63  beq x5,x0,0x0000000e  300      beq t0, x0, MC_RESTORE_OLD
0x000001b0  0x0001a283  lw x5,0x00000000(x3)  302      lw t0, %lo(MOVING_CHARACTER)(gp)
0x000001b4  0x00552023  sw x5,0x00000000(x10) 304      sw t0, 0(a0)
0x000001b8  0x00818293  addi x5,x3,0x00000008 306      addi t0,gp,%lo(MOVING_CHARACTER_LOC)
0x000001bc  0x00a2a023  sw x10,0x00000000(x5) 307      sw a0, 0(t0)
0x000001c0  0x00418293  addi x5,x3,0x00000004 309      addi t0,gp,%lo(DISPLACED_CHARACTER)
0x000001c4  0x0062a023  sw x6,0x00000000(x5)  311      sw t1,0(t0)
0x000001c8  0x0025f293  andi x5,x11,0x00000002318      andi t0, a1, 0x2
0x000001cc  0x00028463  beq x5,x0,0x00000004  319      beq t0, x0, MC_EXIT
0x000001d0  0x007e2023  sw x7,0x00000000(x28) 321      sw t2,0(t3)
0x000001d4  0x00008067  jalr x0,x1,0x00000000 324      jalr x0, ra, 0
0x000001d8  0x0001a283  lw x5,0x00000000(x3)  327      lw t0, %lo(MOVING_CHARACTER)(gp)                   # Load character value to write
0x000001dc  0x00552023  sw x5,0x00000000(x10) 328      sw t0, 0(a0)                                       # Write new character
0x000001e0  0x0081a303  lw x6,0x00000008(x3)  330      lw t1, %lo(MOVING_CHARACTER_LOC)(gp)               # Load address of old character location
0x000001e4  0x02000293  addi x5,x0,0x00000020 331      addi t0, x0, 0x20
0x000001e8  0x00532023  sw x5,0x00000000(x6)  332      sw t0, 0(t1)                                        # Write space in old location
0x000001ec  0x00818313  addi x6,x3,0x00000008 334      addi t1,gp,%lo(MOVING_CHARACTER_LOC)
0x000001f0  0x00a32023  sw x10,0x00000000(x6) 335      sw a0, 0(t1)
0x000001f4  0x00008067  jalr x0,x1,0x00000000 337      jalr x0, ra, 0
0x000001f8  0x000082b7  lui x5,0x00000008     345      li t0, 0x8204                                # Load address of location
0x000001fc  0x20428293  addi x5,x5,0x00000204      
0x00000200  0x0002a303  lw x6,0x00000000(x5)  346      lw t1, 0(t0)                                       # Read value
0x00000204  0x00835313  srli x6,x6,0x00000008 348      srli t1, t1, 8
0x00000208  0x02622a23  sw x6,0x00000034(x4)  349      sw t1, 0x34(tp)  # Write the new color values
0x0000020c  0x00600533  add x10,x0,x6         351      mv a0, t1
0x00000210  0x00008067  jalr x0,x1,0x00000000 352      jalr x0, ra, 0
0x00000214  0xffc10113  addi x2,x2,0xfffffffc 364  	addi sp, sp, -4	    # Make room to save values on the stack
0x00000218  0x00112023  sw x1,0x00000000(x2)  365  	sw ra, 0(sp)		# This function uses 2 callee save regs
0x0000021c  0x00422383  lw x7,0x00000004(x4)  368      lw t2, 0x4(tp)                            # SET_COLOR_FROM_SWITCHES
0x00000220  0x000102b7  lui x5,0x00000010     370      li t0, 0xffff
0x00000224  0xfff28293  addi x5,x5,0xffffffff      
0x00000228  0x0053f3b3  and x7,x7,x5          371      and t2, t2, t0
0x0000022c  0xfff3ce13  xori x28,x7,0xffffffff373      xori t3, t2, -1
0x00000230  0x005e7e33  and x28,x28,x5        375      and t3, t3, t0
0x00000234  0x00ce1e13  slli x28,x28,0x0000000377      slli t3, t3, 12
0x00000238  0x01c3e3b3  or x7,x7,x28          379      or t2, t2, t3
0x0000023c  0x02722a23  sw x7,0x00000034(x4)  380      sw t2, 0x34(tp)  # Write the new color values
0x00000240  0x00700533  add x10,x0,x7         383      mv a0, t2
0x00000244  0x00012083  lw x1,0x00000000(x2)  385  	lw ra, 0(sp)		# Restore return address
0x00000248  0x00410113  addi x2,x2,0x00000004 386  	addi sp, sp, 4		# Update stack pointer
0x0000024c  0x00008067  jalr x0,x1,0x00000000 388      jalr x0, ra, 0
0x00000250  0x00a002b3  add x5,x0,x10         403      mv t0, a0
0x00000254  0x00800333  add x6,x0,x8          404      add t1, x0, s0              # Pointer to VGA space that will change
0x00000258  0x000013b7  lui x7,0x00000001     406      li t2, 0x1000
0x0000025c  0x00038393  addi x7,x7,0x00000000      
0x00000260  0x00532023  sw x5,0x00000000(x6)  408      sw t0, 0(t1)
0x00000264  0xfff38393  addi x7,x7,0xffffffff 409      addi t2, t2, -1             # Decrement counter
0x00000268  0x00038663  beq x7,x0,0x00000006  410      beq t2, x0, FVC_2           # Exit loop when done
0x0000026c  0x00430313  addi x6,x6,0x00000004 411      addi t1, t1, 4              # Increment memory pointer by 4 to next character address
0x00000270  0xff1ff06f  jal x0,0xfffffff8     412      jal x0, FVC_1
0x00000274  0x00008067  jalr x0,x1,0x00000000 414      jalr x0, ra, 0
